apiVersion: v1
kind: ConfigMap
metadata:
  name: kube-config-map
data:
  mysql_host: "cpdatabase"
   
---

apiVersion: v1
kind: Secret
metadata:
  name: kube-database-auth
type: kubernetes.io/basic-auth
stringData:
  password: "geheim"

---

apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    run: category
  name: category
spec:
  replicas: 3
  selector:
    matchLabels:
      run: category
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        run: category
    spec:
      containers:
      - image: docker.io/mika2147/microservice-kubernetes-category:latest
        name: category
        env:
        - name: MYSQL_HOST
          valueFrom: 
            configMapKeyRef:
              name: kube-config-map
              key: mysql_host
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kube-database-auth
              key: password
              optional: false
        ports:
        - containerPort: 8081
        resources: {}
status: {}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    run: product
  name: product
spec:
  replicas: 1
  selector:
    matchLabels:
      run: product
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        run: product
    spec:
      containers:
      - image: docker.io/mika2147/microservice-kubernetes-product:latest
        name: product
        env:
        - name: MYSQL_HOST
          valueFrom: 
            configMapKeyRef:
              name: kube-config-map
              key: mysql_host
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kube-database-auth
              key: password
              optional: false
        ports:
        - containerPort: 8082
        resources: {}
status: {}

---

apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    run: category
  name: category
spec:
  ports:
  - port: 8081
    protocol: TCP
    targetPort: 8081
  selector:
    run: category
status:
  loadBalancer: {}

---


apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    run: product
  name: product
spec:
  ports:
  - port: 8082
    protocol: TCP
    targetPort: 8082
  selector:
    run: product
status:
  loadBalancer: {}

---

#apiVersion: v1
#kind: Service
#metadata:
#  name: cpdatabase
#spec:
#  ports:
#  - port: 3306
#  selector:
#    app: cpdatabase
#  clusterIP: None
#
#---


apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: category
spec:
  hosts:
  - "*"
  gateways:
  - microservice-gateway
  http:
  - match:
    - uri:
        prefix: /categories/
    rewrite:
      uri: /
    route:
    - destination:
        port:
          number: 8081
        host: category.default.svc.cluster.local

---

apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: product
spec:
  hosts:
  - "*"
  gateways:
  - microservice-gateway
  http:
  - match:
    - uri:
        prefix: /products/
    rewrite:
      uri: /
    route:
    - destination:
        port:
          number: 8082
        host: product.default.svc.cluster.local

